[["week-5.html", "Week 5 Lecture in a nutshell Lab demonstration Additional readings Assignments", " Week 5 Age-structured models Lecture in a nutshell Lab demonstration In this lab, we will be analyzing a simple Leslie matrix using for loops + matrix algebra, comparing the results with those obtained via eigenanalysis, and visualizing the population dynamics and age distribution. Part 1 - Analyzing Leslie matrix library(tidyverse) ### Leslie matrix and initial age classes leslie_mtrx &lt;- matrix(data = c(0, 1, 5, 0.5, 0, 0, 0, 0.3, 0), nrow = 3, ncol = 3, byrow = T) initial_age &lt;- c(10, 0, 0) ### for loop and matrix algebra time &lt;- 50 pop_size &lt;- data.frame(Age1 = numeric(time+1), Age2 = numeric(time+1), Age3 = numeric(time+1)) pop_size[1, ] &lt;- initial_age for (i in 1:time) { pop_size[i+1, ] &lt;- leslie_mtrx %*% as.matrix(t(pop_size[i, ])) } pop_size &lt;- pop_size %&gt;% round() %&gt;% mutate(Total_N = rowSums(.), Time = 0:time) %&gt;% relocate(Time) head(round(pop_size)) ## Time Age1 Age2 Age3 Total_N ## 1 0 10 0 0 10 ## 2 1 0 5 0 5 ## 3 2 5 0 2 7 ## 4 3 8 2 0 10 ## 5 4 2 4 1 7 ## 6 5 8 1 1 10 ### Asymptotic growth rate and stable age distribution asymptotic_growth &lt;- round(pop_size[time+1, 5]/pop_size[time, 5], 3) asymptotic_growth ## [1] 1.091 age_distribution &lt;- round(pop_size[time+1, 2:4]/sum(pop_size[time+1, 2:4]), 3) age_distribution ## Age1 Age2 Age3 ## 51 0.632 0.289 0.079 ### Eigenanalysis of the Leslie matrix eigen_out &lt;- eigen(leslie_mtrx) as.numeric(eigen_out$values[1]) %&gt;% round(., 3) # dominant eigenvalue ## [1] 1.09 as.numeric(eigen_out$vectors[, 1]/sum(eigen_out$vectors[, 1])) %&gt;% round(., 3) # stable age distribution ## [1] 0.631 0.289 0.080 The asymptotic growth rate and stable age distribution obtained from for loops and eigenanalysis are pretty much the same. Part 2 - Visualizing population dynamics and age disctibution ### Population sizes for each age class pop_size %&gt;% pivot_longer(cols = -Time, names_to = &quot;Age_class&quot;, values_to = &quot;N&quot;) %&gt;% ggplot(aes(x = Time, y = N, color = Age_class)) + geom_point() + geom_line() + labs(x = &quot;time&quot;, y = expression(italic(N))) + theme_classic(base_size = 12) + scale_x_continuous(limits = c(0, time*1.05), expand = c(0, 0)) + scale_y_log10(limits = c(1, max(pop_size$Total_N)*1.05), expand = c(0, 0)) + scale_color_manual(values = c(&quot;#E41A1C&quot;, &quot;#377EB8&quot;, &quot;#4DAF4A&quot;, &quot;black&quot;), name = NULL, label = c(&quot;Age1&quot;, &quot;Age2&quot;, &quot;Age3&quot;, &quot;Total&quot;)) ### Stable age distribution library(gganimate) age_animate &lt;- pop_size %&gt;% mutate(across(Age1:Age3, function(x){x/Total_N})) %&gt;% select(Time, Age1:Age3) %&gt;% pivot_longer(Age1:Age3, names_to = &quot;Age&quot;, values_to = &quot;Proportion&quot;) %&gt;% ggplot(aes(x = Age, y = Proportion, fill = Age)) + geom_bar(stat = &quot;identity&quot;, show.legend = F) + labs(x = &quot;&quot;) + scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.1), expand = c(0, 0)) + scale_fill_brewer(palette = &quot;Set1&quot;) + theme_classic(base_size = 12) + transition_manual(Time) + ggtitle(&quot;Time {frame}&quot;) + theme(title = element_text(size = 15)) anim_save(&quot;age_distribution.gif&quot;, age_animate, nframes = time + 1, fps = 4, width = 5, height = 4, units = &quot;in&quot;, res = 300) .center { display: block; margin-left: auto; margin-right: auto; width: 70%; } Part 3 - In-class exercise: Analyzing population matrix of common teasel Common teasel (Dipsacus sylvestris) is a herbaceous plant commonly found in abandoned fields and meadows in North America. It has a complex life cycle consisting of various stages. The seeds may lie dormant for one or two years. Seeds that germinate form small rosettes, which will gradually transit into medium and eventually large rosettes. These rosettes (all three sizes) may remain in the same stage for years before entering the next stage. After undergoing vernalization, large rosettes will form stalks and flower in the upcoming summer, set seeds once, and die. Here is a transition diagram for the teasel. Please convert this diagram into a stage-based transition matrix (Lefkovitch matrix) and derive the asymptotic growth rate \\(\\lambda\\) in R. Part 4 - Advanced topic: Incorporating density-dependence into Leslie matrix The cell values in a standard Leslie matrix are fixed and independent of population density, leading to an exponential population growth. This assumption can be relaxed by incorporating density-dependence into the transitions (survival probability, fecundity). Here, we will include negative density-dependence for the fecundity of individuals in Age3 class and see how this might affect the long-term population dynamics. ### Leslie matrix, initial age classes, and carrying capacity leslie_mtrx &lt;- matrix(data = c(0, 1, 5, 0.5, 0, 0, 0, 0.3, 0), nrow = 3, ncol = 3, byrow = T) initial_age &lt;- c(10, 0, 0) K &lt;- 300 ### for loop and matrix algebra time &lt;- 150 pop_size_dens_dep &lt;- data.frame(Age1 = numeric(time+1), Age2 = numeric(time+1), Age3 = numeric(time+1)) pop_size_dens_dep[1, ] &lt;- initial_age for (i in 1:time) { N &lt;- sum(pop_size_dens_dep[i, ]) # the current population size leslie_mtrx_dens_dep &lt;- leslie_mtrx # negative density-dependence for the fecundity of individuals in Age3 class ifelse((1-N/K) &gt; 0, leslie_mtrx_dens_dep[1, 3] &lt;- leslie_mtrx_dens_dep[1, 3]*(1-N/K), leslie_mtrx_dens_dep[1, 3] &lt;- 0) pop_size_dens_dep[i+1, ] &lt;- leslie_mtrx_dens_dep %*% as.matrix(t(pop_size_dens_dep[i, ])) } pop_size_dens_dep &lt;- pop_size_dens_dep %&gt;% round() %&gt;% mutate(Total_N = rowSums(.), Time = 0:time) %&gt;% relocate(Time) head(round(pop_size_dens_dep)) ## Time Age1 Age2 Age3 Total_N ## 1 0 10 0 0 10 ## 2 1 0 5 0 5 ## 3 2 5 0 2 7 ## 4 3 7 2 0 9 ## 5 4 2 4 1 7 ## 6 5 7 1 1 9 ### Age distribution age_distribution_dens_dep &lt;- round(pop_size_dens_dep[time+1, 2:4]/sum(pop_size_dens_dep[time+1, 2:4]), 3) age_distribution_dens_dep ## Age1 Age2 Age3 ## 151 0.61 0.3 0.09 ### Total population size pop_size_dens_dep %&gt;% pivot_longer(cols = -Time, names_to = &quot;Age_class&quot;, values_to = &quot;N&quot;) %&gt;% ggplot(aes(x = Time, y = N, color = Age_class)) + geom_point() + geom_line() + labs(x = &quot;time&quot;, y = expression(italic(N))) + theme_classic(base_size = 12) + scale_x_continuous(limits = c(0, time*1.05), expand = c(0, 0)) + scale_y_continuous(limits = c(0, max(pop_size_dens_dep$Total_N)*1.05), expand = c(0, 0)) + scale_color_manual(values = c(&quot;#E41A1C&quot;, &quot;#377EB8&quot;, &quot;#4DAF4A&quot;, &quot;black&quot;), name = NULL, label = c(&quot;Age1&quot;, &quot;Age2&quot;, &quot;Age3&quot;, &quot;Total&quot;)) ### Stable age distribution age_animate_dens_dep &lt;- pop_size_dens_dep %&gt;% mutate(across(Age1:Age3, function(x){x/Total_N})) %&gt;% select(Time, Age1:Age3) %&gt;% pivot_longer(Age1:Age3, names_to = &quot;Age&quot;, values_to = &quot;Proportion&quot;) %&gt;% ggplot(aes(x = Age, y = Proportion, fill = Age)) + geom_bar(stat = &quot;identity&quot;, show.legend = F) + labs(x = &quot;&quot;) + scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.1), expand = c(0, 0)) + scale_fill_brewer(palette = &quot;Set1&quot;) + theme_classic(base_size = 12) + transition_manual(Time) + ggtitle(&quot;Time {frame}&quot;) + theme(title = element_text(size = 15)) anim_save(&quot;age_distribution_dens_dep.gif&quot;, age_animate_dens_dep, nframes = time + 1, fps = 4, width = 5, height = 4, units = &quot;in&quot;, res = 300) Part 5 - COM(P)ADRE: A global database of population matrices COM(P)ADRE is an online repository containing matrix population models on hundreds of plants, animals, algae, fungi, bacteria, and viruses around the world, as well as their associated metadata. Take a look at the website: You will be exploring the population dynamics of a species (of your choice) in your assignment! Additional readings Assignments "]]
