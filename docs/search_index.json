[["week-5.html", "Week 5 Lecture in a nutshell Lab demonstration Additional readings Assignments", " Week 5 Age-structured models Lecture in a nutshell Lab demonstration In this lab, we will be analyzing a simple Leslie matrix using for loops + matrix algebra and visualizing the population dynamics (total population size and age distribution). We will also compare the for loops results with the results obtained via eigenanalysis. Part 1 - Analyzing Leslie matrix library(tidyverse) ### Leslie matrix and initial age classes leslie_mtrx &lt;- matrix(data = c(0, 0, 10, 0.6, 0, 0, 0, 0.3, 0.1), nrow = 3, ncol = 3, byrow = T) initial_age &lt;- c(20, 0, 0) ### for loop and matrix algebra time &lt;- 150 pop_size &lt;- data.frame(Age1 = numeric(time+1), Age2 = numeric(time+1), Age3 = numeric(time+1)) pop_size[1, ] &lt;- initial_age for (i in 1:time) { pop_size[i+1, ] &lt;- leslie_mtrx %*% as.matrix(t(pop_size[i, ])) } pop_size &lt;- pop_size %&gt;% round() %&gt;% mutate(Total_N = rowSums(.), Time = 0:time) %&gt;% relocate(Time) head(round(pop_size)) ## Time Age1 Age2 Age3 Total_N ## 1 0 20 0 0 20 ## 2 1 0 12 0 12 ## 3 2 0 0 4 4 ## 4 3 36 0 0 36 ## 5 4 4 22 0 26 ## 6 5 0 2 6 8 ### Asymptotic growth rate and stable age distribution asymptotic_growth &lt;- round(pop_size[time+1, 4]/pop_size[time, 4], 3) asymptotic_growth ## [1] 1.256 age_distribution &lt;- round(pop_size[time+1, 2:4]/sum(pop_size[time+1, 2:4]), 3) age_distribution ## Age1 Age2 Age3 ## 151 0.622 0.3 0.078 ### Eigenanalysis of the Leslie matrix eigen_out &lt;- eigen(leslie_mtrx) as.numeric(eigen_out$values[1]) %&gt;% round(., 3) # dominant eigenvalue ## [1] 1.251 as.numeric(eigen_out$vectors[, 1]/sum(eigen_out$vectors[, 1])) %&gt;% round(., 3) # stable age distribution ## [1] 0.623 0.299 0.078 The asymptotic growth rate and stable age distribution are pretty much the same for both for loops and eigenanalysis. Part 2 - Visualizing population dynamics ### Total population size ggplot(data = pop_size, aes(x = Time, y = Total_N)) + geom_point() + geom_line() + labs(x = &quot;time&quot;, y = expression(italic(N))) + theme_classic(base_size = 12) + scale_x_continuous(limits = c(0, time*1.05), expand = c(0, 0)) + scale_y_continuous(limits = c(0, max(pop_size$Total_N)*1.05), expand = c(0, 0)) ### Stable age distribution library(gganimate) age_animate &lt;- pop_size %&gt;% mutate(across(Age1:Age3, function(x){x/Total_N})) %&gt;% select(Time, Age1:Age3) %&gt;% pivot_longer(Age1:Age3, names_to = &quot;Age&quot;, values_to = &quot;Proportion&quot;) %&gt;% ggplot(aes(x = Age, y = Proportion, fill = Age)) + geom_bar(stat = &quot;identity&quot;, show.legend = F) + labs(x = &quot;&quot;) + scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.1), expand = c(0, 0)) + scale_fill_brewer(palette = &quot;Set1&quot;) + theme_classic(base_size = 12) + transition_manual(Time) + ggtitle(&quot;Time {frame}&quot;) + theme(title = element_text(size = 15)) anim_save(&quot;age_distribution.gif&quot;, age_animate, nframes = time + 1, fps = 4, width = 5, height = 4, units = &quot;in&quot;, res = 300) Part 3 - Advanced topic: Incorporating density-dependence into Leslie matrix The cell values in a standard Leslie matrix are fixed and independent of population density, leading to an exponential population growth. This assumption can be relaxed by incorporating density-dependence into the transitions (survival probability, fecundity). Here, we will make the fecundity of individuals in Age3 class negatively density-dependent and see how this affects the long-term dynamics of the population. ### Leslie matrix, initial age classes, and carrying capacity leslie_mtrx &lt;- matrix(data = c(0, 0, 10, 0.6, 0, 0, 0, 0.3, 0.1), nrow = 3, ncol = 3, byrow = T) initial_age &lt;- c(20, 0, 0) K &lt;- 10000 ### for loop and matrix algebra time &lt;- 150 pop_size_dens_dep &lt;- data.frame(Age1 = numeric(time+1), Age2 = numeric(time+1), Age3 = numeric(time+1)) pop_size_dens_dep[1, ] &lt;- initial_age for (i in 1:time) { N &lt;- sum(pop_size_dens_dep[i, ]) # the current population size leslie_mtrx_dens_dep &lt;- leslie_mtrx # negative density-dependence of fecundity for individuals in Age3 class ifelse((1-N/K) &gt; 0, leslie_mtrx_dens_dep[1, 3] &lt;- leslie_mtrx_dens_dep[1, 3]*(1-N/K), leslie_mtrx_dens_dep[1, 3] &lt;- 0) pop_size_dens_dep[i+1, ] &lt;- leslie_mtrx_dens_dep %*% as.matrix(t(pop_size_dens_dep[i, ])) } pop_size_dens_dep &lt;- pop_size_dens_dep %&gt;% round() %&gt;% mutate(Total_N = rowSums(.), Time = 0:time) %&gt;% relocate(Time) head(round(pop_size_dens_dep)) ## Time Age1 Age2 Age3 Total_N ## 1 0 20 0 0 20 ## 2 1 0 12 0 12 ## 3 2 0 0 4 4 ## 4 3 36 0 0 36 ## 5 4 4 22 0 26 ## 6 5 0 2 6 8 ### Age distribution age_distribution_dens_dep &lt;- round(pop_size_dens_dep[time+1, 2:4]/sum(pop_size_dens_dep[time+1, 2:4]), 3) age_distribution_dens_dep ## Age1 Age2 Age3 ## 151 0.982 0 0.018 ### Total population size ggplot(data = pop_size_dens_dep, aes(x = Time, y = Total_N)) + geom_point() + geom_line() + labs(x = &quot;time&quot;, y = expression(italic(N))) + theme_classic(base_size = 12) + scale_x_continuous(limits = c(0, time*1.05), expand = c(0, 0)) + scale_y_continuous(limits = c(0, max(pop_size_dens_dep$Total_N)*1.05), expand = c(0, 0)) ### Stable age distribution age_animate_dens_dep &lt;- pop_size_dens_dep %&gt;% mutate(across(Age1:Age3, function(x){x/Total_N})) %&gt;% select(Time, Age1:Age3) %&gt;% pivot_longer(Age1:Age3, names_to = &quot;Age&quot;, values_to = &quot;Proportion&quot;) %&gt;% ggplot(aes(x = Age, y = Proportion, fill = Age)) + geom_bar(stat = &quot;identity&quot;, show.legend = F) + labs(x = &quot;&quot;) + scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.1), expand = c(0, 0)) + scale_fill_brewer(palette = &quot;Set1&quot;) + theme_classic(base_size = 12) + transition_manual(Time) + ggtitle(&quot;Time {frame}&quot;) + theme(title = element_text(size = 15)) anim_save(&quot;age_distribution_dens_dep.gif&quot;, age_animate_dens_dep, nframes = time + 1, fps = 4, width = 5, height = 4, units = &quot;in&quot;, res = 300) Additional readings Assignments "]]
