[["index.html", "Introduction to Theoretical Ecology Course Information", " Introduction to Theoretical Ecology Instructor: Po-Ju Ke \\(~~~~~\\) Teaching Assistant: Gen-Chang Hsu 2021 Fall at National Taiwan Univeristy Course Information IMPORTANT ANOUNCEMENT!!! The first three weeks of this course will be online. We will host the two modules of this course (i.e., 2-hr lecture and 1-hr practice) on different platforms. We will use Google Meet for the lecture section (link here). To mimic an environment where we can provide one-on-one coding advice, we will use Gather Town for the hands-on practice section (link here). Please login in advance to make sure it is working; learn how to use Gather Town here. For those who wish to enroll manually, please join the first lecture and stay online afterward. Since we have moved to a larger classroom due to COVID-19 regulation, we can accommodate more students. We have asked students to introduce themselves (e.g., research interest and familiarity with R; 1-2 minutes) during the first time we meet online, so please also be prepared if you wish to enroll. Description The development of theory plays an important role in advancing ecology as a scientific field. This three-unit course is for students at the graduate or advanced undergraduate level. The course will cover classic theoretical topics in ecology, starting from single-species dynamics and gradually build up to multi-species models. The course will primarily focus on population and community ecology, but we will also briefly discuss models in epidemiology and ecosystem ecology. Emphasis will be on theoretical concepts and corresponding mathematical approaches. This course is designed as a two-hour lecture followed by a one-hour hands-on practice module. In the lecture, we will analyze dynamical models and derive general theories in ecology. In the hands-on practice section, we will use a combination of analytical problem sets, interactive applications, and numerical simulations to gain a general understanding of the dynamics and behavior of different models. Objectives By the end of the course, students are expected to be familiar with the basic building blocks of ecological models and would be able to formulate and analyze simple models of their own. The hands-on practice component should allow students to link their ecological intuition with the underlying mathematical model, helping them to better understand the primary literature of theoretical ecology. Requirements Students are expected to have a basic understanding of Calculus (e.g., freshman introductory course) and Ecology. Format Tuesday 1:20 pm ~ 4:20 pm at Classroom 3C, Life Science Building Lecture (two hours): selected topics of ecological theories and models (blackboard writing) Lab (one hour): hands-on practice in programming and simulation (using R) + discussion Grading The final grade consists of: Assignment problem sets (60%) Midterm exam (15%) Final exam (15%) Course participation (10%) Course materials We will be using a combination of textbooks and literature articles on theoretical ecology in this course. Textbook chapters and additional reading materials will be provided (see Syllabus for more details). Below are the textbook references: Case, Ted J. An illustrated guide to theoretical ecology. Oxford University Press, 2000. Gotelli, Nicholas J. A primer of ecology 4th edition. Sinauer Associates, 2008. Pastor, John. Mathematical ecology of populations and ecosystems. John Wiley &amp; Sons, 2011. Otto, Sarah P. and Troy Day. A biologists guide to mathematical modeling in ecology and evolution. Princeton University Press, 2011. Contacts Instructor: Po-Ju Ke Office: Life Science Building R635 Email: pojuke@ntu.edu.tw Office hours: by appointment Teaching assistant: Gen-Chang Hsu Email: b04b01065@ntu.edu.tw Office hours: by appointment "],["syllabus.html", "Syllabus", " Syllabus Date Lecture topic Lab Readings Week 1 28-Sept-2021 Introduction: what is theoretical ecology? - Grainger et al., 2021 Week 2 05-Oct-2021 Exponential population growth Solving exponential growth equation using deSolve &amp; Visualization Gotelli [Ch.1] Case [Ch.1] Week 3 12-Oct-2021 Logistic population growth and stability analysis Solving logistic growth equation using deSolve &amp; Visualization Gotelli [Ch.2] Case [Ch.5] Otto &amp; Day [Ch.5] Week 4 19-Oct-2021 Discrete exponential and logistic models Modeling discrete logistic growth using for loops &amp; Visualization May, 1976 Week 5 26-Oct-2021 Age-structured models Analyzing Leslie matrix using for loops and eigenanalysis Gotelli [Ch.3] Case[Ch.3] Week 6 02-Nov-2021 Metapopulations and patch occupancy models Gotelli [Ch.4] Case [Ch.16] Week 7 09-Nov-2021 Lotka-Volterra model of competition: graphical analysis Gotelli [Ch.5] Case [Ch.14] Week 8 16-Nov-2021 Lotka-Volterra model of competition: linear stability analysis Otto &amp; Day [Ch.8] Week 9 23-Nov-2021 Midterm exam - \\(~~~~~~~~~~~~\\) - Week 10 30-Nov-2021 Predator-prey interactions Gotelli [Ch.6] Case [Ch.12 &amp; 13] Week 11 07-Dec-2021 Mutualisms Vandermeer &amp; Boucher, 1978 Week 12 14-Dec-2021 Multispecies models of competition: apparent and exploitative competition Holt, 1977. Week 13 21-Dec-2021 Multispecies models of predation: food chains and intraguild predation Holt &amp; Polis, 1997 Week 14 28-Dec-2021 Disease dynamics and SIR models Anderson &amp; May, 1979 Week 15 04-Jan-2022 Ecosystem models and feedbacks Pastor [Ch.11 &amp; 12] Week 16 11-Jan-2022 Final exam - \\(~~~~~~~~~~~~\\) - "],["week-1.html", "Week 1 Lecture in a nutshell Lab demonstration Additional readings Assignments", " Week 1 Introduction: what is theoretical ecology? Lecture in a nutshell Lecture handout Introduction to ecological theories and mathematical models Constructing ecological models: 5 steps Step 1. Formulate the motivating question Step 2. Determine the basic ingredients Step 3. Qualitatively describe the biological system Step 4. Quantitatively describe the biological system Step 5. Analyze the model Apply ecological models in your study: 4 approaches Approach 1. Adopt the framework Approach 2. Test the predictions Approach 3. Use the equations (model fitting/proxy calculation) Approach 4. Test model assumptions Some relevant math techniques: Derivatives and integrals, linear approximation and Taylor expansion Lab demonstration No lab demonstration this week. Additional readings Grainger et al.Â (2021). An empiricists guide to using ecological theory. American Naturalist. Assignments Please review the study material and make sure you understand the basic R syntax and programming fundamentals, which we will be using throughout the semester. The example dataset for the tutorial is provided below. Basic Introduction to R Example dataset "],["week-2.html", "Week 2 Lecture in a nutshell Lab demonstration Additional readings Assignments", " Week 2 Exponential population growth Lecture in a nutshell Model derivation: Population growth rate: \\(Birth - Death + Immigration - Emigration\\) Per capita growth rate: \\((birth - death + immigration - emigration)\\times N\\). Assumptions: Closed population: \\(Immigration\\) = \\(Emigration = 0\\) All individuals are identical: no genetic/age/stage structure Continuous population growth: no time lag Per capita birth and death rates are constant: time- and density-independent Solving the differential equation \\(\\frac{dN}{dt} = (b-d)N\\): Use separation of variables and integrate both sides Plug in the initial condition \\(N_0\\) at \\(t = 0\\) Integration result: \\(N_{(t)} = N_0e^{(b-d)t} = N_0e^{rt}\\) Related concept: Doubling time \\(t_d = \\frac{ln(2)}{r}\\) Average (expected) lifetime for an exponential decay function \\(N_{(t)} = N_0e^{-\\delta t}\\): Probability density function (PDF): \\(\\frac{N_0e^{-\\delta t} - N_0e^{-\\delta (t+\\Delta t)}}{N_0} \\approx \\delta e^{-\\delta t}\\) (linear approximation) Expected value: \\(\\int_{0}^{\\infty}t\\delta e^{-\\delta t}dt\\) Use integration by parts to evaluate the integral Integration result: \\(\\frac{1}{\\delta}\\) Relaxation of assumption 1: Net immigration/emigration is not zero: \\(\\frac{dN}{dt} = rN + I_{(t)}\\) Solve the equation using the general solution to first-order linear differential equations Relaxation of assumption 4: Per capita growth rate \\(r\\) is not a constant but rather a function of time: \\(\\frac{dN}{dt} = r_{(t)}N\\) An example of \\(r_{(t)}\\): \\(r_{(t)} = \\overline{r} + \\frac{\\sigma}{2}sin(\\omega t + \\phi)\\) Biological interpretation of \\(r_{(t)}\\): seasonality, environmental fluctuations, etc. Lab demonstration In this lab, we will be solving the differential equation for exponential population growth (Part 1) and visualize how the population sizes change over time (Part 2). Part 1 - Numerical solution using the package deSolve Two main phases: Model specification: specify the structure of differential equation model Model application: set the time steps, initial population size, model parameters (e.g., intrinsic population growth rate r) and solve the equation p span#aaa:before { content: \"(1) \"; display: inline-block; margin-left: -1.5em; margin-right: 0.3em; } p span#bbb:before { content: \"(2) \"; display: inline-block; margin-left: -1.5em; margin-right: 0.3em; } d-article table.lightable-paper { margin-bottom: 0px; } # install.packages(&quot;deSolve&quot;) library(deSolve) ### (1) Model specification exponential_model &lt;- function(times, state, parms) { with(as.list(c(state, parms)), { dN_dt = r*N # exponential growth equation return(list(c(dN_dt))) # return the results }) } ### (2) Model application times &lt;- seq(0, 10, by = 0.1) # time steps to integrate over state &lt;- c(N = 10) # initial population size parms &lt;- c(r = 1.5) # intrinsic growth rate # run the ode solver pop_size &lt;- ode(func = exponential_model, times = times, y = state, parms = parms) # take a look at the results head(pop_size) ## time N ## [1,] 0.0 10.00000 ## [2,] 0.1 11.61834 ## [3,] 0.2 13.49860 ## [4,] 0.3 15.68313 ## [5,] 0.4 18.22120 ## [6,] 0.5 21.17002 Part 2. Visualize the integration results: Linear scale # install.packages(&quot;tidyverse&quot;) library(tidyverse) ggplot(data = as.data.frame(pop_size), aes(x = time, y = N)) + geom_point() + labs(title = paste0(&quot;Exponential Growth \\n (r = &quot;, parms[&quot;r&quot;], &quot;)&quot;)) + theme_classic(base_size = 12) + theme(plot.title = element_text(hjust = 0.5)) + scale_x_continuous(limits = c(0, 10.5), expand = c(0, 0)) + scale_y_continuous(limits = c(0, max(as.data.frame(pop_size)$N)*1.1), expand = c(0, 0)) Log scale ggplot(data = as.data.frame(pop_size), aes(x = time, y = N)) + geom_point() + labs(title = paste0(&quot;Exponential Growth \\n (r = &quot;, parms[&quot;r&quot;], &quot;)&quot;)) + theme_classic(base_size = 12) + theme(plot.title = element_text(hjust = 0.5)) + scale_x_continuous(limits = c(0, 10.5), expand = c(0, 0)) + scale_y_log10(breaks = scales::trans_breaks(&quot;log10&quot;, function(x) 10^x)(c(10, 10^7)), labels = scales::trans_format(&quot;log10&quot;, scales::math_format(10^.x)), expand = c(0, 0)) Additional readings Package deSolve: Solving Initial Value Differential Equations in R Assignments Exponential Population Growth with Constant Immigration Suggested Solutions "],["week-3.html", "Week 3 Lecture in a nutshell Lab demonstration Additional readings Assignments", " Week 3 Logistic population growth and stability analysis Lecture in a nutshell Model derivation: Population growth rate: \\(Birth - Death + Immigration - Emigration\\) Per capita growth rate: \\((birth - death + immigration - emigration)\\times N\\). Assumptions: Closed population: \\(Immigration\\) = \\(Emigration = 0\\) All individuals are identical: no genetic/age/stage structure Continuous population growth without time lag Per capita birth and death rates are time-independent BUT density-dependent Resource is limited: negative density-dependence (NDD) \\(\\frac{dr_{(N)}}{dt} &lt; 0\\) Linear density-dependence: \\(b_{(n)} = b_{0}-b_{N}N\\); \\(d_{(n)} = d_{0}+d_{N}N\\) \\(\\begin{aligned}\\frac{dN}{dt}&amp;=(b_{0}-b_{N}N-d_{0}-d_{N}N)N\\\\&amp;=((b_{0}-d_{0})-(d_{N}+b_{N})N)N\\\\&amp;=(r_{0}-\\alpha N)N\\\\&amp;=r_{0}N(1-\\frac{N}{K})\\end{aligned}\\) Integration of the differential equation \\(N_{(t)} = \\frac{K}{1-\\frac{N_{0}-K}{N_{0}}e^{-r_{0}t}}\\) Equilibrium \\(N^*\\): good candidates where the system will end up \\(\\frac{dN}{dt} = f_{(N^*)} = r_{0}N^{*}(1-\\frac{N^*}{K}) = 0\\); \\(N^* = 0, K\\) Attracting (Stable) vs.Â Repelling (Unstable) vs.Â Saddle Graphical analysis Plot the function \\(\\frac{dN}{dt} = f(N)\\) and determine the direction of change (positive/negative) on both sides of the equilibrium points \\(N^*\\) Local stability analysis A small displacement from the equilibrium: \\(\\epsilon_{(t)} = N - N^*\\) Examine how \\(\\epsilon_{(t)}\\) changes over time (i.e., the behavior of the small displacement): \\(\\frac{d\\epsilon_{(t)}}{dt} = f(N-N^*) = f(N^*) + \\epsilon \\frac{dN}{dt}|_{N = N^*} + O_{(\\epsilon^2)} \\approx \\epsilon\\frac{dN}{dt}|_{N = N^*} = \\lambda \\epsilon\\); \\(\\epsilon_{(t)} = \\epsilon_{0}e^{\\lambda t}\\) (the behavior of \\(\\epsilon_{(t)}\\) is determined by the sign of \\(\\lambda\\)) General procedure: take derivative of the differential equation with respect to \\(N\\) and evaluate it at the equilibrium point \\(N^*\\): \\(\\frac{dN}{dt}|_{N = N^*} = \\lambda &gt; 0\\): unstable equilibrium \\(\\frac{dN}{dt}|_{N = N^*} = \\lambda &lt; 0\\): stable equilibrium Lab demonstration In this lab, we will solve the differential equation for logistic population growth and visualize how the population sizes change over time. Have a quick review of the lab section in Week 2. We will also take a look at how population growth rate (\\(\\frac{dN}{dt}\\)) and per capita growth rate (\\(\\frac{dN}{dtN}\\)) change with population size (\\(N\\)). Part 1 - Solving the logistic growth equation and visualize the results library(tidyverse) library(deSolve) ### Model specification logistic_model &lt;- function(times, state, parms) { with(as.list(c(state, parms)), { dN_dt = r*N*(K-N)/K # logistic growth equation return(list(c(dN_dt))) # return the results }) } ### Model application times &lt;- seq(0, 10, by = 0.1) # time steps to integrate over state &lt;- c(N = 10) # initial population size parms &lt;- c(r = 1.5, K = 500) # intrinsic growth rate and carrying capacity # run the ode solver pop_size &lt;- ode(func = logistic_model, times = times, y = state, parms = parms) ### Visualize the results ggplot(data = as.data.frame(pop_size), aes(x = time, y = N)) + geom_point() + labs(title = paste0(&quot;Logistic Growth \\n (r = &quot;, parms[&quot;r&quot;], &quot;, K = &quot;, parms[&quot;K&quot;], &quot;)&quot;)) + theme_classic(base_size = 12) + theme(plot.title = element_text(hjust = 0.5)) + scale_x_continuous(limits = c(0, 10.5), expand = c(0, 0)) + scale_y_continuous(limits = c(0, max(as.data.frame(pop_size)$N)*1.1), expand = c(0, 0)) iframe {border: 0;} Here is an interactive web app for the logistic growth model. Feel free to play around with the parameters/values and see how the population trajectories change. Please select a set of parameters of your choice and reproduce the output figure you see in this app. Part 2 - The relationship between population growth rate (\\(\\frac{dN}{dt}\\))/per capita growth rate (\\(\\frac{dN}{dtN}\\)) and population size (\\(N\\)) # parameters r &lt;- 1.5 K &lt;- 500 # a vector of population sizes N &lt;- 0:600 # calculate the population growth rates and per capita growth rates dN_dt &lt;- r*N*(K-N)/K dN_dtN &lt;- r*(K-N)/K # organize into a dataframe logistic_data &lt;- data.frame(N, dN_dt, dN_dtN) %&gt;% pivot_longer(cols = c(dN_dt, dN_dtN), names_to = &quot;vars&quot;, values_to = &quot;values&quot;) # plot K_df &lt;- data.frame(xend = c(500, 500), yend = c(20, 0.1), xstart = c(500, 500), ystart = c(100, 0.5), labels = c(&quot;italic(K)&quot;, &quot;italic(K)&quot;), vars = c(&quot;dN_dt&quot;, &quot;dN_dtN&quot;)) ggplot(data = logistic_data, aes(x = N, y = values)) + geom_line(size = 1.2) + geom_point(x = 500, y = 0, size = 4, color = &quot;blue&quot;) + geom_hline(yintercept = 0, linetype = &quot;dashed&quot;, color = &quot;red&quot;, size = 1.2) + labs(x = &quot;N&quot;, y = &quot;&quot;) + facet_wrap(~vars, ncol = 2, scales = &quot;free_y&quot;, strip.position = &quot;left&quot;, labeller = as_labeller(c(dN_dt = &quot;dN/dt&quot;, dN_dtN = &quot;dN/dtN&quot;))) + theme_bw(base_size = 12) + theme(strip.background = element_blank(), strip.placement = &quot;outside&quot;, legend.position = &quot;top&quot;, legend.title = element_blank()) + scale_x_continuous(limits = c(0, 610), expand = c(0, 0)) + geom_segment(data = K_df, aes(x = xstart, y = ystart, xend = xend, yend = yend), arrow = arrow(length = unit(0.03, &quot;npc&quot;)), size = 1.2, color = &quot;blue&quot;) + geom_text(data = K_df, aes(x = xstart, y = ystart*1.2, label = labels), size = 5, color = &quot;blue&quot;, parse = T) Additional readings Logistic Growth Assignments Population Growth with Allee Effects Suggested Solutions "],["week-4.html", "Week 4 Lecture in a nutshell Lab demonstration Additional readings Assignments", " Week 4 Discrete exponential and logistic models Lecture in a nutshell Discrete exponential growth (geometric growth): \\(N_{t+1} = RN_{t}; N_{t+1} = R^{t}N_{0}\\) Assumptions: Closed population Identical individuals Unlimited resources: critical rates are constant Discrete growth and census Pre-breeding census: \\(N_{t+1} = (1 + \\beta)(1-\\delta) N_{t} = RN_{t}\\) Cobweb plot: \\(N_{t+1}\\) vs.Â \\(N_{t}\\) Connection to the continuous model:\\(N_{t+\\Delta t} = (1+\\beta \\Delta t)(1-\\delta \\Delta t) N_{t}; \\\\\\frac {dN}{dt} = \\lim_{\\Delta t \\to 0} \\frac {N(t+\\Delta t)-N(t)}{\\Delta t} = \\lim_{\\Delta t \\to 0} (\\beta N_{t}-\\delta N_{t} - \\beta \\delta \\Delta t) = (\\beta-\\delta)N_{t}\\) Relationship between the intrinsic population growth rate r (which is a rate) and the finite rate of increase R (which is unitless): \\(r = \\frac {ln(R)}{h}\\). \\(h\\) is the time interval between two population growth events. Note that R and cannot be directly manipulated; any math computations should be done on r (e.g., divide it by 10), and the modified r can later be converted back to R. Discrete logistic growth: \\(N_{t+1} = N_{t} + rN_{t}(1-\\frac {N_{t}}{K}) = N_{t}(1+r(1- \\frac {N_{t}}{K})) = F_{(N_{t})}\\) The equilibrium \\(N^* = N_{t+1} = N_{t} \\to N^* = 0, K\\) Local stability analysis: A small displacement from the equilibrium point at time \\(t\\): \\(\\epsilon_{t} = N_{t} - N^{*}\\) The behavior of this small displacement at next time step \\(t+1\\): \\(\\begin{aligned}\\epsilon_{t+1}&amp;=N_{t+1}-N^{*}\\\\&amp;=F_{(N_{t+1})}-N^{*}\\\\&amp;=F_{(N^{*}+\\epsilon_{t})}-N^{*}\\\\&amp;=F(N^*)+\\epsilon_{t} \\frac{dF}{dN}|_{N=N^*}+O_{(\\epsilon_{t}^2)}-N^{*} \\\\&amp;\\approx \\epsilon_{t}\\frac{dF}{dN}|_{N = N^*}\\\\&amp;=\\lambda \\epsilon\\end{aligned}\\) Stability criteria: \\(\\lambda &gt; 1\\): unstable (smoothly moving away from the equilibrium) \\(0 &lt; \\lambda &lt; 1\\): stable (smoothly approaching the equilibrium) \\(-1 &lt; \\lambda &lt; 0\\): stable (damped oscillations converging towards the equilibrium) \\(\\lambda &lt; -1\\): unstable (oscillations around the equilibrium) For the discrete logistic model: \\(N^{*} = 0\\) is unstable (\\(\\lambda = 1+r &gt; 1\\)) \\(K\\) is stable only if \\(0 &lt; r &lt; 2\\) (\\(\\lambda = 1-r ~\\&amp;~ |\\lambda| &lt; 1\\)) Lab demonstration In this lab, we are going to model the discrete logistic population growth and visualize the system dynamics. Part 1 - Model the discrete logistic population growth using for loops library(tidyverse) ### (1) Set the parameters r &lt;- 1.8 K &lt;- 500 N0 &lt;- 10 time &lt;- 100 ### (2) Define the discrete logistic growth equation log_fun &lt;- function(r, N, K){N + r*N*(1-N/K)} ### (3) Use for loop to iterate over the time sequence pop_size &lt;- numeric(time) pop_size[1] &lt;- N0 for (i in 2:time) {pop_size[i] &lt;- log_fun(r = r, N = pop_size[i - 1], K = K)} pop_data &lt;- pop_size %&gt;% as.data.frame() %&gt;% rename(., pop_size = `.`) %&gt;% mutate(time = 0:(time-1)) %&gt;% relocate(time) head(pop_data) ## time pop_size ## 1 0 10.00000 ## 2 1 27.64000 ## 3 2 74.64171 ## 4 3 188.93980 ## 5 4 400.51775 ## 6 5 543.95762 Part 2. Visualize the population dynamics: ### Population trajectory ggplot(pop_data, aes(x = time, y = pop_size)) + geom_point() + geom_line() + geom_hline(yintercept = K, color = &quot;red&quot;, size = 1.2, linetype = &quot;dashed&quot;) + geom_text(x = time*1.02, y = K+50, label = &quot;italic(K)&quot;, color = &quot;red&quot;, size = 6.5, parse = T) + labs(y = expression(italic(N)), title = paste0(&quot;Discrete logistic growth&quot;, &quot;\\n&quot;, &quot;(r = &quot;, r, &quot;, K = &quot;, K, &quot;, N0 = &quot;, N0, &quot;)&quot;)) + scale_x_continuous(limits = c(0, time*1.05), expand = c(0, 0)) + scale_y_continuous(limits = c(0, max(pop_size)*1.1), expand = c(0, 0)) + theme_bw(base_size = 15) + theme(plot.title = element_text(hjust = 0.5)) ### Cobweb plot/logistic map cobweb_data &lt;- data.frame(Nt = rep(pop_size[-time], each = 2), Nt1 = c(0, rep(pop_size[-1], each = 2)[-length(rep(pop_size[-1], each = 2))])) logistic_map &lt;- data.frame(Nt = seq(0, (r+1)/r*K, by = 0.1)) %&gt;% mutate(Nt1 = Nt + r*Nt*(1-Nt/K)) ggplot() + geom_line(data = logistic_map, aes(x = Nt, y = Nt1), color = &quot;green&quot;, size = 1.2) + geom_path(data = cobweb_data, aes(x = Nt, y = Nt1), color = &quot;blue&quot;, size = 0.5) + geom_abline(slope = 1, intercept = 0, color = &quot;red&quot;, size = 1) + labs(x = expression(italic(N[t])), y = expression(italic(N[t+1])), title = paste0(&quot;Cobweb plot/logistic map&quot;, &quot;\\n&quot;, &quot;(r = &quot;, r, &quot;, K = &quot;, K, &quot;, N0 = &quot;, N0, &quot;)&quot;)) + scale_x_continuous(limits = c(0, (r+1)/r*K*1.05), expand = c(0, 0)) + scale_y_continuous(limits = c(0, max(pop_size)*1.1), expand = c(0, 0)) + theme_bw(base_size = 15) + theme(plot.title = element_text(hjust = 0.5), panel.grid = element_blank()) *The name logistic map comes from the fact that it maps the population size at one time step Nt to the value at the next time step Nt+1. iframe {border: 0;} Here is a shiny app for the discrete logistic growth model. Feel free to play around with different inputs and see how the system dynamics change accordingly. Additional readings Simple mathematical models with very complicated dynamics Assignments Ricker Logistic Gowth Model "],["week-5.html", "Week 5 Lecture in a nutshell Lab demonstration Additional readings Assignments", " Week 5 Age-structured models Lecture in a nutshell Model derivation: Model diagram: a sequence of age classes connected through arrows of survival probability (\\(Si\\)) and fecundity (\\(fi\\)) Assumptions: Closed population Individuals within each age class are identical Critical rates are age-dependent BUT not time- or density-dependent (unlimited resources) Discrete age classes; individuals do not remain in the same age class over time Model dynamics (linear algebra): A simple example: Age class at time t: \\(\\vec{n}_{t} = \\begin{vmatrix}n_{1.t} \\\\ n_{2.t} \\\\ n_{3.t} \\end{vmatrix}\\) Leslie matrix \\(L\\) (transition matrix): \\(\\begin{vmatrix}f_{1} &amp; f_{2} &amp; f_{3}\\\\S_{1} &amp; 0 &amp; 0\\\\0 &amp; S_{2} &amp; 0 \\end{vmatrix}\\) Age class at time t+1: \\(\\vec{n}_{t+1} = L \\cdot \\vec{n}_{t}\\) Eigenanalysis: eigenvalues (\\(\\lambda\\)) and eigenvectors (\\(\\vec{u}\\)) \\(L\\vec{u} = \\lambda\\vec{u}; (L - \\lambda I)\\vec{u} = 0; det|L - \\lambda I| = 0\\) Solve for \\(\\lambda\\) and find the corresponding \\(\\vec{u}\\) Eigendecomposition (for diagonalizable matrix): \\(L = ADA^{-1}; A = \\begin{vmatrix}\\vec{u}_{1} &amp; \\vec{u}_{2} &amp; \\vec{u}_{3} \\end{vmatrix}; D = \\begin{vmatrix}\\lambda_{1} &amp; 0 &amp; 0\\\\0 &amp; \\lambda_{2} &amp; 0\\\\0 &amp; 0 &amp; \\lambda_{3} \\end{vmatrix}\\) \\(L^{t} = AD^{t}A^{-1} \\approx A\\lambda_{1}^{t}A^{-1}\\) (\\(\\lambda_{1}\\) is the dominant eigenvalue) The long-term dynamics of Leslie matrix are determined by: The dominant eigenvalue \\(\\lambda_{1}\\): finite rate of increase (asymptotic growth rate) The dominant eigenvector \\(\\vec{u}_{1}\\): stable age distribution For an \\(n \\times n\\) Leslie matrix, the characteristic equation (Euler-Lotka equation) can be written as: \\(\\sum_{i}^{n} S_{i}f{i}\\lambda^{-i} = 1\\) Stage-structured models: Stages are arbitrarily defined by the user Individuals can remain in the same stage class or even regress back to previous stage class Lab demonstration In this lab, we will be analyzing a simple Leslie matrix using for loops + matrix algebra, comparing the results with those obtained via eigenanalysis, and visualizing the population dynamics and age distribution. Part 1 - Analyzing Leslie matrix library(tidyverse) ### Leslie matrix and initial age classes leslie_mtrx &lt;- matrix(data = c(0, 1, 5, 0.5, 0, 0, 0, 0.3, 0), nrow = 3, ncol = 3, byrow = T) initial_age &lt;- c(10, 0, 0) ### for loop and matrix algebra time &lt;- 50 pop_size &lt;- data.frame(Age1 = numeric(time+1), Age2 = numeric(time+1), Age3 = numeric(time+1)) pop_size[1, ] &lt;- initial_age for (i in 1:time) { pop_size[i+1, ] &lt;- leslie_mtrx %*% as.matrix(t(pop_size[i, ])) } pop_size &lt;- pop_size %&gt;% round() %&gt;% mutate(Total_N = rowSums(.), Time = 0:time) %&gt;% relocate(Time) head(round(pop_size)) ## Time Age1 Age2 Age3 Total_N ## 1 0 10 0 0 10 ## 2 1 0 5 0 5 ## 3 2 5 0 2 7 ## 4 3 8 2 0 10 ## 5 4 2 4 1 7 ## 6 5 8 1 1 10 ### Asymptotic growth rate and stable age distribution asymptotic_growth &lt;- round(pop_size[time+1, 5]/pop_size[time, 5], 3) asymptotic_growth ## [1] 1.091 age_distribution &lt;- round(pop_size[time+1, 2:4]/sum(pop_size[time+1, 2:4]), 3) age_distribution ## Age1 Age2 Age3 ## 51 0.632 0.289 0.079 ### Eigenanalysis of the Leslie matrix eigen_out &lt;- eigen(leslie_mtrx) as.numeric(eigen_out$values[1]) %&gt;% round(., 3) # dominant eigenvalue ## [1] 1.09 as.numeric(eigen_out$vectors[, 1]/sum(eigen_out$vectors[, 1])) %&gt;% round(., 3) # stable age distribution ## [1] 0.631 0.289 0.080 The asymptotic growth rate and stable age distribution obtained from for loops and eigenanalysis are pretty much the same. Part 2 - Visualizing population dynamics and age distribution ### Population sizes for each age class pop_size %&gt;% pivot_longer(cols = -Time, names_to = &quot;Age_class&quot;, values_to = &quot;N&quot;) %&gt;% ggplot(aes(x = Time, y = N, color = Age_class)) + geom_point() + geom_line() + labs(x = &quot;time&quot;, y = expression(italic(N))) + theme_classic(base_size = 12) + scale_x_continuous(limits = c(0, time*1.05), expand = c(0, 0)) + scale_y_log10(limits = c(1, max(pop_size$Total_N)*1.05), expand = c(0, 0)) + scale_color_manual(values = c(&quot;#E41A1C&quot;, &quot;#377EB8&quot;, &quot;#4DAF4A&quot;, &quot;black&quot;), name = NULL, label = c(&quot;Age1&quot;, &quot;Age2&quot;, &quot;Age3&quot;, &quot;Total&quot;)) ### Stable age distribution library(gganimate) age_animate &lt;- pop_size %&gt;% mutate(across(Age1:Age3, function(x){x/Total_N})) %&gt;% select(Time, Age1:Age3) %&gt;% pivot_longer(Age1:Age3, names_to = &quot;Age&quot;, values_to = &quot;Proportion&quot;) %&gt;% ggplot(aes(x = Age, y = Proportion, fill = Age)) + geom_bar(stat = &quot;identity&quot;, show.legend = F) + labs(x = &quot;&quot;) + scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.1), expand = c(0, 0)) + scale_fill_brewer(palette = &quot;Set1&quot;) + theme_classic(base_size = 12) + transition_manual(Time) + ggtitle(&quot;Time {frame}&quot;) + theme(title = element_text(size = 15)) anim_save(&quot;age_distribution.gif&quot;, age_animate, nframes = time + 1, fps = 4, width = 5, height = 4, units = &quot;in&quot;, res = 300) .center { display: block; margin-left: auto; margin-right: auto; width: 70%; } Part 3 - In-class exercise: Analyzing population matrix of common teasel Common teasel (Dipsacus sylvestris) is a herbaceous plant commonly found in abandoned fields and meadows in North America. It has a complex life cycle consisting of various stages. The seeds may lie dormant for one or two years. Seeds that germinate form small rosettes, which will gradually transit into medium and eventually large rosettes. These rosettes (all three sizes) may remain in the same stage for years before entering the next stage. After undergoing vernalization, large (and a few medium) rosettes will form stalks and flower in the upcoming summer, set seeds once, and die. Occasionally, the flowering plants will produce seeds that directly germinate into small/medium/large rosettes without entering dormancy. Here is a transition diagram for the teasel. Please convert this diagram into a stage-based transition matrix (Lefkovitch matrix) and derive the asymptotic growth rate \\(\\lambda\\) in R. Part 4 - Advanced topic: Incorporating density-dependence into Leslie matrix The cell values in a standard Leslie matrix are fixed and independent of population density, leading to an exponential population growth. This assumption can be relaxed by incorporating density-dependence into the transitions (survival probability, fecundity). Here, we will include negative density-dependence for the fecundity of individuals in Age3 class and see how this might affect the long-term population dynamics. ### Leslie matrix, initial age classes, and carrying capacity leslie_mtrx &lt;- matrix(data = c(0, 1, 5, 0.5, 0, 0, 0, 0.3, 0), nrow = 3, ncol = 3, byrow = T) initial_age &lt;- c(10, 0, 0) K &lt;- 300 ### for loop and matrix algebra time &lt;- 150 pop_size_dens_dep &lt;- data.frame(Age1 = numeric(time+1), Age2 = numeric(time+1), Age3 = numeric(time+1)) pop_size_dens_dep[1, ] &lt;- initial_age for (i in 1:time) { N &lt;- sum(pop_size_dens_dep[i, ]) # the current population size leslie_mtrx_dens_dep &lt;- leslie_mtrx # negative density-dependence for the fecundity of individuals in Age3 class ifelse((1-N/K) &gt; 0, leslie_mtrx_dens_dep[1, 3] &lt;- leslie_mtrx_dens_dep[1, 3]*(1-N/K), leslie_mtrx_dens_dep[1, 3] &lt;- 0) pop_size_dens_dep[i+1, ] &lt;- leslie_mtrx_dens_dep %*% as.matrix(t(pop_size_dens_dep[i, ])) } pop_size_dens_dep &lt;- pop_size_dens_dep %&gt;% round() %&gt;% mutate(Total_N = rowSums(.), Time = 0:time) %&gt;% relocate(Time) head(round(pop_size_dens_dep)) ## Time Age1 Age2 Age3 Total_N ## 1 0 10 0 0 10 ## 2 1 0 5 0 5 ## 3 2 5 0 2 7 ## 4 3 7 2 0 9 ## 5 4 2 4 1 7 ## 6 5 7 1 1 9 ### Age distribution age_distribution_dens_dep &lt;- round(pop_size_dens_dep[time+1, 2:4]/sum(pop_size_dens_dep[time+1, 2:4]), 3) age_distribution_dens_dep ## Age1 Age2 Age3 ## 151 0.61 0.3 0.09 ### Total population size pop_size_dens_dep %&gt;% pivot_longer(cols = -Time, names_to = &quot;Age_class&quot;, values_to = &quot;N&quot;) %&gt;% ggplot(aes(x = Time, y = N, color = Age_class)) + geom_point() + geom_line() + labs(x = &quot;time&quot;, y = expression(italic(N))) + theme_classic(base_size = 12) + scale_x_continuous(limits = c(0, time*1.05), expand = c(0, 0)) + scale_y_continuous(limits = c(0, max(pop_size_dens_dep$Total_N)*1.05), expand = c(0, 0)) + scale_color_manual(values = c(&quot;#E41A1C&quot;, &quot;#377EB8&quot;, &quot;#4DAF4A&quot;, &quot;black&quot;), name = NULL, label = c(&quot;Age1&quot;, &quot;Age2&quot;, &quot;Age3&quot;, &quot;Total&quot;)) ### Stable age distribution age_animate_dens_dep &lt;- pop_size_dens_dep %&gt;% mutate(across(Age1:Age3, function(x){x/Total_N})) %&gt;% select(Time, Age1:Age3) %&gt;% pivot_longer(Age1:Age3, names_to = &quot;Age&quot;, values_to = &quot;Proportion&quot;) %&gt;% ggplot(aes(x = Age, y = Proportion, fill = Age)) + geom_bar(stat = &quot;identity&quot;, show.legend = F) + labs(x = &quot;&quot;) + scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.1), expand = c(0, 0)) + scale_fill_brewer(palette = &quot;Set1&quot;) + theme_classic(base_size = 12) + transition_manual(Time) + ggtitle(&quot;Time {frame}&quot;) + theme(title = element_text(size = 15)) anim_save(&quot;age_distribution_dens_dep.gif&quot;, age_animate_dens_dep, nframes = time + 1, fps = 4, width = 5, height = 4, units = &quot;in&quot;, res = 300) Part 5 - COM(P)ADRE: A global database of population matrices COM(P)ADRE is an online repository containing matrix population models on hundreds of plants, animals, algae, fungi, bacteria, and viruses around the world, as well as their associated metadata. Take a look at the website: You will be exploring the population dynamics of a species (of your choice) in your assignment! Additional readings Otto &amp; Day Box 9.1 - Long-Term Dynamics and the Role of the Leading Eigenvalue Assignments Age-Structured Models "],["week-6.html", "Week 6 Lecture in a nutshell Lab demonstration Additional readings Assignments", " Week 6 Metapopulations and patch occupancy models Lecture in a nutshell Topic: Topic: Lab demonstration Additional readings Assignments "]]
