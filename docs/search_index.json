[["week-11.html", "Week 11 Lecture in a nutshell Lab demonstration Additional readings Assignments", " Week 11 Lotka-Volterra model of predator-prey interactions (2) Lecture in a nutshell Topic: Topic: Lab demonstration Similar to what weve done in the previous class, in this lab we are going to analyze the RosenzweigMacArthur predatorprey model: \\(\\begin{align}\\frac {dN}{dt} = rN(1-\\frac{N}{K})-a\\frac{N}{h+N}P\\end{align}\\\\\\) \\(\\begin{align}\\frac {dP}{dt} = ea\\frac{N}{h+N}P-dP\\end{align}\\) Please simulate the model using the parameter set (N = 5, P = 2, r = 1.0, K = 5.0, a = 1.3, h = 0.9, e = 0.6, d = 0.5) and plot the population trajectories of predator and prey as well as show their population dynamics in the state-space diagram. What will happen if you add a perturbation to the system (i.e., change the initial conditions)? Try out different values of N and P and visualize the differences in the state-space diagram. Also compare the results of the RosenzweigMacArthur model and the original Lotka-Volterra model. What do you find regarding the final equilibrium cycles? library(tidyverse) library(deSolve) ### Model specification RM_predation_model &lt;- function(times, state, parms) { with(as.list(c(state, parms)), { dN_dt = r*N*(1-(N/K))-(a*N/(1+a*h*N))*P dP_dt = e*(a*N/(1+a*h*N))*P-d*P return(list(c(dN_dt, dP_dt))) }) } ### Model parameters times &lt;- seq(0, 200, by = 0.01) state &lt;- c(N = 5, P = 2) parms &lt;- c(r = 1.0, K = 5.0, a = 1.3, h = 0.9, e = 0.6, d = 0.5) ### Model application pop_size &lt;- ode(func = RM_predation_model, times = times, y = state, parms = parms) ### Visualize the population dynamics # (1) population trajectories pop_size %&gt;% as.data.frame() %&gt;% pivot_longer(cols = -time, names_to = &quot;species&quot;, values_to = &quot;N&quot;) %&gt;% ggplot(aes(x = time, y = N, color = species)) + geom_line(size = 1.5) + theme_classic(base_size = 12) + labs(x = &quot;Time&quot;, y = &quot;Population size&quot;) + scale_x_continuous(limits = c(0, 200.5), expand = c(0, 0)) + scale_y_continuous(limits = c(0, max(pop_size[, -1])*1.2), expand = c(0, 0)) + scale_color_brewer(name = NULL, palette = &quot;Set1&quot;, labels = c(&quot;Prey&quot;, &quot;Predator&quot;)) # (2) state-space diagram pop_size %&gt;% as.data.frame() %&gt;% ggplot(aes(x = N, y = P)) + geom_path() + geom_vline(xintercept = with(as.list(parms), d/(e*a-a*d*h)), color = &quot;#377EB8&quot;, size = 1) + geom_function(data = data.frame(x = seq(0, 5, 0.01)), aes(x = x), fun = function(n){with(as.list(parms), r*(1+a*h*n)*(1-n/K)/a)}, inherit.aes = F, color = &quot;#E41A1C&quot;, size = 1) + geom_point(aes(x = tail(N, 1), y = tail(P, 1)), size = 2) + theme_classic(base_size = 14) + theme(axis.line.x = element_line(color = &quot;#377EB8&quot;, size = 1), axis.line.y = element_line(color = &quot;#E41A1C&quot;, size = 1)) + labs(x = &quot;Prey&quot;, y = &quot;Predator&quot;) + scale_x_continuous(limits = c(0, max(pop_size[, &quot;N&quot;]*1.05)), expand = c(0, 0)) + scale_y_continuous(limits = c(0, max(pop_size[, &quot;P&quot;]*1.05)), expand = c(0, 0)) iframe {border: 0;} Here is a shiny app for the RosenzweigMacArthur predatorprey model. Feel free to play around with different parameter inputs and see how the system dynamics change accordingly. Special topic: time-scale separation Time-scale separation is a useful technique to reduce the dimension of the model system, where some state variables are assumed to operate at a much shorter time scale (i.e., fast variables) compared with the others (i.e., slow variables). The fast variables will adjust rapidly to their new equilibria in response to a slight change in the slow variables, such that the slow variables can be viewed as constants from the perspective of fast variables. Here, we are going to use the Lotka-Volterra model with logistic prey growth to demonstrate time-scale separation: \\(\\begin{align}\\frac {dN}{dt} = rN(1-\\frac{N}{K})-aNP\\end{align}\\\\\\) \\(\\begin{align}\\frac {dP}{dt} = eaNP-dP\\end{align}\\) We will treat prey as a fast variable and predator as a slow variable. First, we find the equilibrium of prey: \\(\\begin{align}N^{*} = K(1-\\frac{ap}{r}) \\end{align}\\) And then we plug \\(N^{*}\\) into predator growth: \\(\\begin{align}\\frac {dP}{dt} = (eaK-d)P(1-\\frac{eaK(\\frac{a}{r})}{eaK-d}P)\\end{align}\\) What do you see in the above equation? It is actually a logistic growth model! So under time-scale separation, predator will exhibit logistic population growth. We will show this shortly in the code below. One simple way to achieve time-scale separation in this model is to increase the prey growth rate so that prey will grow much faster than predator, mimicking the shorter generation time of prey relative to that of predator. Prey_logistic_model &lt;- function(times, state, parms) { with(as.list(c(state, parms)), { dN_dt = r*N*(1-(N/K))-a*N*P dP_dt = e*a*N*P-d*P return(list(c(dN_dt, dP_dt))) }) } times &lt;- seq(0, 100, by = 0.01) state &lt;- c(N = 40, P = 20) parms &lt;- c(r = 40.0, K = 60, a = 0.1, e = 0.1, d = 0.5) # r is chosen to be sufficiently large for time-scale separation pop_size &lt;- ode(func = Prey_logistic_model, times = times, y = state, parms = parms) # population trajectories pop_size %&gt;% as.data.frame() %&gt;% pivot_longer(cols = -time, names_to = &quot;species&quot;, values_to = &quot;N&quot;) %&gt;% ggplot(aes(x = time, y = N, color = species)) + geom_line(size = 1.5) + theme_classic(base_size = 12) + labs(x = &quot;Time&quot;, y = &quot;Population size&quot;) + scale_x_continuous(limits = c(0, 100.5), expand = c(0, 0)) + scale_y_continuous(limits = c(0, max(pop_size[, -1])*1.2), expand = c(0, 0)) + scale_color_brewer(name = NULL, palette = &quot;Set1&quot;, labels = c(&quot;Prey&quot;, &quot;Predator&quot;)) # state-space diagram pop_size %&gt;% as.data.frame() %&gt;% ggplot(aes(x = N, y = P)) + geom_point(color = &quot;grey60&quot;, size = 3, shape = 21) + geom_vline(xintercept = with(as.list(parms), d/(e*a)), color = &quot;#377EB8&quot;, size = 1) + geom_abline(slope = with(as.list(parms), -r/(a*K)), intercept = with(as.list(parms), r/a), color = &quot;#E41A1C&quot;, size = 1) + geom_point(aes(x = tail(N, 1), y = tail(P, 1)), size = 2) + theme_classic(base_size = 14) + theme(axis.line.x = element_line(color = &quot;#377EB8&quot;, size = 1), axis.line.y = element_line(color = &quot;#E41A1C&quot;, size = 1)) + labs(x = &quot;Prey&quot;, y = &quot;Predator&quot;) + scale_y_continuous(limits = c(NA, 100)) If we solve for the new predator growth equation derived under time-scale separation using the same parameter set and visualize the population trajectory, we will get almost exactly the same predator growth pattern as that in the original model. Time_scale_logistic &lt;- function(times, state, parms) { with(as.list(c(state, parms)), { dP_dt = (e*a*K-d)*P*(1-((e*a*K*(a/r))/(e*a*K-d))*P) return(list(c(dP_dt))) }) } times_timescale &lt;- seq(0, 100, by = 0.01) state_timescale &lt;- c(P = 20) parms_timescale &lt;- c(r = 40.0, K = 60, a = 0.1, e = 0.1, d = 0.5) # r is chosen to be sufficiently large for time-scale separation pop_size_timescale &lt;- ode(func = Time_scale_logistic, times = times_timescale, y = state_timescale, parms = parms_timescale) # plot the two predator population trajectories in the same figure pop_size_timescale %&gt;% as.data.frame() %&gt;% mutate(P_original = pop_size[, &quot;P&quot;]) %&gt;% rename(P_timescale = P) %&gt;% pivot_longer(cols = -time, names_to = &quot;model&quot;, values_to = &quot;n&quot;) %&gt;% ggplot(aes(x = time, y = n, color = model)) + geom_line(size = 1.5, alpha = 0.8) + theme_classic(base_size = 14) + labs(x = &quot;Time&quot;, y = &quot;Population size&quot;) + scale_x_continuous(limits = c(0, 100.5), expand = c(0, 0)) + scale_y_continuous(limits = c(0, max(pop_size[, -1])*1.2), expand = c(0, 0)) + scale_color_brewer(name = NULL, palette = &quot;Set1&quot;, labels = c(&quot;Original&quot;, &quot;Time-scale&quot;)) If you gradually shift from small to large r values, you can see that the population dynamics of prey and predator change quite dramatically. Some interesting patterns will arise! iframe {border: 0;} Additional readings Assignments No assignments this week. "]]
